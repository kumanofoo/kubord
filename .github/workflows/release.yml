# .github/workflows/release.yml

name: Rust Release

on:
  push:
    branches:
      - develop
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  PROJECT_NAME: $(grep -m 1 '^name =' Cargo.toml | sed 's/.*= *//' | tr -d '"')

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: x86_64
          - target: aarch64-unknown-linux-gnu
            arch: aarch64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain with cross
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install cross
        run: cargo install cross

      - name: Cache cargo registry and index
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binaries
        run: cross build --release --all-targets --target ${{ matrix.target }}

      - name: Package binaries
        run: |
          mkdir staging

          BINS=$(cargo read-manifest --manifest-path Cargo.toml | jq -r '.targets[] | select(.kind[] | contains("bin")) | .name')
          
          for bin_name in $BINS; do
            echo "Packaging $bin_name..."
            cp "target/${{ matrix.target }}/release/$bin_name" staging/
          done

      - name: Create archive
        run: |
          # developブランチの場合は"develop"、タグの場合はタグ名（例: v1.0.0）を取得
          REF_NAME=${{ github.ref_name }}
          ARCHIVE_NAME="${{ env.PROJECT_NAME }}-${REF_NAME}-${{ matrix.arch }}.tar.gz"
          
          tar -czvf "${ARCHIVE_NAME}" -C staging .

          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ matrix.arch }}
          path: ${{ env.ARCHIVE_NAME }}

  # リリースジョブ: タグがプッシュされた場合のみ実行
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          pattern: release-assets-*
          path: release-assets
          merge-multiple: true # v4の機能。複数のArtifactを1つのディレクトリにまとめる

      - name: Create Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: release-assets/*.tar.gz
